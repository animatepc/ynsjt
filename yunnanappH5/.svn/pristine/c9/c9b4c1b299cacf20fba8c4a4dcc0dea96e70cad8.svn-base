export const adapted = {
    orientation(doc, win){
    	//orientationchange方向改变事件
		var docEl = doc.documentElement,//根元素html
		
		//判断窗口有没有orientationchange这个方法，有就赋值给一个变量，没有就返回resize方法。
		
		resizeEvt = 'orientationchange' in window ? 'orientationchange' : 'resize',
		
		recalc = function () {
		
		var clientWidth = docEl.clientWidth;
		
		if (!clientWidth) return;
		
		//把document的fontSize大小设置成跟窗口成一定比例的大小，从而实现响应式效果。
		
		docEl.style.fontSize = document.documentElement.clientWidth/ 7.5 + 'px';
		
		};
		
		//alert(docEl)
		
		if (!doc.addEventListener) return;
		
		win.addEventListener(resizeEvt, recalc, false);//addEventListener事件方法接受三个参数：第一个是事件名称比如点击事件onclick，第二个是要执行的函数，第三个是布尔值
		
		doc.addEventListener('DOMContentLoaded', recalc, false)//绑定浏览器缩放与加载时间
		//alert(document.documentElement.clientWidth/320)
    },
    dpr(){
    	var dpr, rem, scale,win = window; 
		var docEl = document.documentElement; 
		var metaEl = document.querySelector('meta[name="viewport"]');
		dpr = win.devicePixelRatio || 1; 
		scale = 1 / dpr;
		rem = docEl.clientWidth * dpr / 7.5; 
		// 设置viewport，进行缩放，达到高清效果 
		metaEl.setAttribute('content', 'width=' + 'device-width' + ', initial-scale=' + scale + ',maximum-scale=' + scale + ', minimum-scale=' + scale + ',user-scalable=no'); 
		// 设置data-dpr属性，留作的css hack之用 
//		console.log()
		docEl.setAttribute('data-dpr', dpr); 
		// 动态写入样式 
//		docEl.firstElementChild.appendChild(fontEl); 
//		fontEl.innerHTML = 'html{font-size:' + rem + 'px!important;}'; 
		// 给js调用的，某一dpr下rem和px之间的转换函数 
		window.rem2px = function(v) { 
		v = parseFloat(v); 
		return v * rem; 
		}; 
		window.px2rem = function(v) { 
		v = parseFloat(v); 
		return v / rem; 
		};
		window.dpr = dpr; 
		window.rem = rem; 
    },
    px2rem(){
      	let wid = document.documentElement.clientWidth / (window.devicePixelRatio || 1)
    	this.$refs.header.style = `width:${window.px2rem(wid) - 0.4}rem`
    }
}